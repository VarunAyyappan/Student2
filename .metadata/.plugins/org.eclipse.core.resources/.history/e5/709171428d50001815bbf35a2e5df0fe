package jrJava.tetris;

import java.awt.Graphics;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.image.BufferedImage;

public class TetrisObject implements KeyListener {

	public static final int BLOCK_SIZE = 20;
	public static final int SIZE = 3*BLOCK_SIZE;
	
	private BufferedImage image, image2, temp;
	private int x, y;
	private int color;
	
	
	public TetrisObject(int[] shape){
		image = new BufferedImage(SIZE + 1, SIZE + 1, BufferedImage.TYPE_INT_ARGB);
		image2 = new BufferedImage(SIZE + 1, SIZE + 1, BufferedImage.TYPE_INT_ARGB);
		
		x = 130;
		y = 20;
		color = 0xffffff00;
		
		int i;
		int j, k;
		
		for(i=0; i<shape.length; i++){
			if(shape[i]==0) continue;
			
			for(j=0; j<=BLOCK_SIZE; j++){
				for(k=0; k<=BLOCK_SIZE; k++){
					
					if(j==0 || j==BLOCK_SIZE || k==0 || k==BLOCK_SIZE){
						image.setRGB(i%3*BLOCK_SIZE + j, i/3*BLOCK_SIZE + k, 0xff000000); 
					}
					else {
						image.setRGB(i%3*BLOCK_SIZE + j, i/3*BLOCK_SIZE + k, color); 
					}
				}
			}
		}
		
	}

	public TetrisObject(int[] shape, int colorIn){
		image = new BufferedImage(SIZE + 1, SIZE + 1, BufferedImage.TYPE_INT_ARGB);
		image2 = new BufferedImage(SIZE + 1, SIZE + 1, BufferedImage.TYPE_INT_ARGB);
		
		x = 130;
		y = 20;
		color = colorIn;
		
		int i;
		int j, k;
		
		for(i=0; i<shape.length; i++){
			if(shape[i]==0) continue;
			
			for(j=0; j<=BLOCK_SIZE; j++){
				for(k=0; k<=BLOCK_SIZE; k++){
					
					if(j==0 || j==BLOCK_SIZE || k==0 || k==BLOCK_SIZE){
						image.setRGB(i%3*BLOCK_SIZE + j, i/3*BLOCK_SIZE + k, 0xff000000); 
					}
					else {
						image.setRGB(i%3*BLOCK_SIZE + j, i/3*BLOCK_SIZE + k, color); 
					}
				}
			}
		}
		
	}
	
	
	public void moveDown(){
		y += BLOCK_SIZE;
		SoundEffect.moveDown();
	}
	
	
	
	public void draw(Graphics g){
		g.drawImage(image, x, y, null);
	}
	
	
	protected void moveLeft(){
		x -= BLOCK_SIZE;
		//if(!isLegal()){
		//	x += BLOCK_SIZE;
		//	return;
		//}
		SoundEffect.shift();
	}
	
	protected void moveRight(){
		x += BLOCK_SIZE;
		//if(!isLegal()){
		//	x -= BLOCK_SIZE;
		//	return;
		//}
		SoundEffect.shift();
	}
	
	
	protected void rotate(){
		// rotate clockwise by 90 degree.
		int j, k;
		for(j=0; j<=SIZE; j++){
			for(k=0; k<=SIZE; k++){
				image2.setRGB(SIZE-k, j, image.getRGB(j, k));
			}
		}
		
		temp = image2;
		image2 = image;
		image = temp;
	
		//if(!isLegal()){
		//	temp = image;
		//  image2 = image;
		//  image = temp;
		//	return;
		//}
		SoundEffect.rotate();
	}
	
	
	protected void mirror(){
		// flip horizontally
		int j, k;
		for(j=0; j<=SIZE; j++){
			for(k=0; k<=SIZE; k++){
				image2.setRGB(SIZE-j, k, image.getRGB(j, k));
			}
		}
		
		temp = image2;
		image2 = image;
		image = temp;
		
		//if(!isLegal()){
		//	temp = image2;
		//  image2 = image;
		//  image = temp;
		//	return;
		//}
		SoundEffect.mirror();
	}
	
	
	
	
	
	public void keyPressed(KeyEvent e){
		int keyCode = e.getKeyCode();
		
		if(keyCode==KeyEvent.VK_LEFT || keyCode==KeyEvent.VK_A) moveLeft();
		else if(keyCode==KeyEvent.VK_RIGHT || keyCode==KeyEvent.VK_D) moveRight();
		else if(keyCode==KeyEvent.VK_DOWN || keyCode==KeyEvent.VK_S) moveRight();
		else if(keyCode==KeyEvent.VK_R) rotate();
		else if(keyCode==KeyEvent.VK_M) mirror();
		else if(keyCode==KeyEvent.VK_B) mirror();
		
	}
	
	public void keyReleased(KeyEvent e){ } 
	public void keyTyped(KeyEvent e){ }
	
	
}











