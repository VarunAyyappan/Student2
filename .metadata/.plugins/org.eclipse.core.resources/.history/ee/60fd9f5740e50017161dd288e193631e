package jrJava.linkedList3;

import java.util.Iterator;

import jrJava.linkedList2.Link;

public class LinkedList<E> {
	
	private Link<E> first;
	
	public LinkedList(){
		first = null; // redundant
	}
	
	public MyIterator getIterator() {
		return new MyIterator();
	}
	
	public boolean isEmpty(){
		return first==null;
	}
	
	
	private Link<E> getFirst(){
		return first;
	}
	
	
	public void insertAtBeginning(E obj){
		Link<E> toInsert = new Link(obj);
		toInsert.next = first;
		first = toInsert;
	}
	
	
	public int size(){
		int count = 0;
		Link<E> current = first;
		while(current!=null){
			count++;
			current = current.next;
		}
		return count;
	}
	
	
	public E removeFirst(){
		Link<E> toRemove = first;
		if(first!=null) first = first.next;
		return toRemove.obj;
	}
	
	
	public String toString(){
		
		if(isEmpty()) return "Empty";
		
		StringBuilder sb = new StringBuilder();
		
		Link current = first;
	
		while(current!=null){
			sb.append(current.toString());
			sb.append(" ");
			current = current.next;
		}
		
		return sb.toString();
	}
	
	// --------------------------------------------------------------------------

	public class IteratorImpl implements Iterator<E> {
		private Link<E> current, previous;
		
		
		public void reset(){
			current = null;
			previous = null;
		}
		
		public boolean hasNext(){
			if(current==null && previous==null) return first!=null;
			return current.next!=null;
		}
		
		
		public E next(){
			if(current==null && previous==null){
				current = first;
			}
			else {
				previous = current;
				current = current.next;
			}
			
			return current.obj;
		}
		
		public void remove() {
			
		}
	}
	
	// --------------------------------------------------------------------------
	
	private static class Link<E> {

		public Link<E> next;
		public E obj;
		
		public Link(E obj){
			this.obj = obj;
		}
		
		public String toString(){
			return "{" + obj.toString() + "}";
		}
		
		public boolean equals(Object o){
			return obj.equals(o);
		}
		
	}
	
	// --------------------------------------------------------------------------
}











